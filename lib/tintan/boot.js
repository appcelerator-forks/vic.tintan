// Generated by CoffeeScript 1.6.3
(function() {
  var $, Boot, E, T, Tintan, appXML, eco, fs, info, npm_install, path, sublimeProject, xtnd, _, _ref;

  require('colors');

  path = require('path');

  fs = require('fs');

  eco = require('eco');

  info = console.info;

  xtnd = require('deep-extend');

  _ref = {}, Tintan = _ref.Tintan, $ = _ref.$, _ = _ref._, E = _ref.E, appXML = _ref.appXML;

  T = function(pth) {
    T.deps.push(_(pth));
    return file(_(pth), function() {
      var temp, value;
      info('create'.green + ' ' + pth);
      jake.mkdirP(path.dirname(this.name));
      temp = E(pth + '.eco');
      if (fs.existsSync(temp)) {
        temp = fs.readFileSync(temp, 'utf-8');
        value = eco.render(temp, {
          Tintan: Tintan
        });
        return fs.writeFileSync(this.name, value, 'utf-8');
      } else {
        return jake.cpR(E(pth), this.name);
      }
    });
  };

  T.deps = [];

  npm_install = function() {
    var npm,
      _this = this;
    info('updating'.green + ' node modules');
    npm = require('child_process').spawn('npm', ['install', '-l']);
    npm.stdout.on('data', function(data) {
      return process.stdout.write(data);
    });
    npm.stderr.on('data', function(data) {
      return process.stderr.write(data);
    });
    return npm.on('exit', function(code) {
      if (code !== 0) {
        fail('npm install -l: failed with code ' + code);
      }
      return complete();
    });
  };

  sublimeProject = function(Tintan) {
    var cwd, f, file;
    cwd = process.cwd();
    file = Tintan.config().envOrGet('sublime_project');
    file || (file = ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = fs.readdirSync(cwd);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        f = _ref1[_i];
        if (/\.sublime-project$/.test(f)) {
          _results.push(f);
        }
      }
      return _results;
    })()).sort()[0]);
    return file || (file = (cwd = cwd.split('/'))[cwd.length - 1]);
  };

  Boot = (function() {
    Boot.prototype.ready = function() {
      var files, v, _i, _len;
      files = ['package.json', 'Jakefile.coffee', 'plugins/tintan/plugin.py'];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        v = files[_i];
        if (jake.Task['boot:' + _(v)].isNeeded()) {
          return false;
        }
      }
      return true;
    };

    function Boot(Ti) {
      var plugin_py;
      Tintan = Ti;
      appXML = Tintan.appXML();
      $ = Tintan.$;
      E = $.E, _ = $._;
      plugin_py = 'plugins/tintan/plugin.py';
      namespace('boot', function() {
        var filename;
        T(plugin_py);
        desc('Install the Tintan plugin for Titanium Studio');
        task({
          'plugin.py': _(plugin_py)
        });
        desc('Register plugin on tiapp.xml');
        task('plugin.xml', function() {
          var plugin, pluginVersion, plugins, xml, _ref1;
          plugin = appXML.plugin();
          pluginVersion = plugin != null ? (_ref1 = plugin.attr('version')) != null ? _ref1.value() : void 0 : void 0;
          if (pluginVersion !== Tintan.version) {
            info('register'.green + ' tintan plugin on tiapp.xml');
            xml = appXML.doc;
            plugins = xml.get('./plugins');
            if (!plugins) {
              plugins = xml.root().node('plugins', '');
            }
            if (plugin == null) {
              plugin = plugins.node('plugin', 'tintan');
            }
            plugin.attr({
              version: Tintan.version
            });
            xml.encoding('utf-8');
            return fs.writeFileSync(appXML.file(), xml.toString(), 'utf-8');
          }
        });
        T.deps.push('plugin.xml');
        T('package.json');
        desc('Create a generic package.json');
        task({
          'package.json': _('package.json')
        });
        T('Jakefile.coffee');
        desc('Create a basic Jakefile');
        task({
          'Jakefile.coffee': _('Jakefile.coffee')
        });
        T('tintan.config');
        desc('Create a default config file');
        task({
          'tintan.config': _('tintan.config')
        });
        filename = sublimeProject(Tintan);
        desc('Add Tintan build system to #{filename}');
        task('sublime', function() {
          var existing, tmpl, value;
          tmpl = fs.readFileSync(E('sublime-project.json.eco'), 'utf-8');
          value = eco.render(tmpl, {
            Tintan: Tintan
          });
          if (fs.existsSync(filename)) {
            info('upgrading'.green + ' ' + filename);
            value = JSON.parse(value);
            existing = JSON.parse(fs.readFileSync(filename, 'utf-8'));
            existing.build_systems = xtnd(existing.build_systems || {}, value.build_systems);
            value = JSON.stringify(existing, void 0, 2);
          }
          fs.writeFileSync(filename, value, 'utf-8');
          return Tintan.config().set({
            sublime_project: filename
          });
        });
        T.deps.push('sublime');
        desc('Install node modules with npm');
        task('npm', [_('package.json')], npm_install, {
          async: true
        });
        T.deps.push('npm');
        desc('Initialize this project to use Tintan');
        return task('init', T.deps, function() {
          info('Tintan initialized'.bold.italic);
          return info('Take a look at your Jakefile.coffee');
        });
      });
      desc('Upgrade node modules and Tintan plugin');
      task('upgrade', ['boot:plugin.py', 'boot:plugin.xml', 'boot:sublime'], function() {
        var etc_plugin_py;
        etc_plugin_py = E(plugin_py);
        file(_(plugin_py), [etc_plugin_py], function() {
          info('upgrading'.green + ' ' + this.name);
          return jake.cpR(etc_plugin_py, this.name);
        });
        task('npm_update', [_('package.json')], function() {
          var gitrepo, package_json;
          info('bumping tintan version in package.json to'.green + ' ' + Tintan.version);
          package_json = fs.readFileSync(_('package.json'), 'utf-8');
          package_json = JSON.parse(package_json);
          package_json.devDependencies.tintan = Tintan.version;
          if ((!package_json.repository) || package_json.repository === {}) {
            gitrepo = Tintan.$.gitrepo();
            info('adding project git repo to package.json:'.green + ' ' + gitrepo.url);
            package_json.repository = gitrepo;
          }
          package_json = JSON.stringify(package_json, void 0, 2);
          fs.writeFileSync(_('package.json'), package_json, 'utf-8');
          return invoke('boot:npm');
        });
        invoke(_(plugin_py));
        invoke('npm_update');
        return info('upgrade complete'.green);
      });
    }

    return Boot;

  })();

  module.exports = function(Tintan) {
    return new Boot(Tintan);
  };

}).call(this);

/*
//@ sourceMappingURL=boot.map
*/
