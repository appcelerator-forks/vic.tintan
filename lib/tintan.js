// Generated by CoffeeScript 1.6.3
(function() {
  var $, AppXML, Config, Tintan, fs, ini, libxml, path, source_map, spawn,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('colors');

  path = require('path');

  fs = require('fs');

  libxml = require('libxmljs');

  spawn = require('child_process').spawn;

  ini = require('ini');

  source_map = require('source-map-support').install();

  $ = (function() {
    function $() {}

    $.onTaskNamespace = function(taskName, scope) {
      var names, rec;
      names = taskName.split(':');
      taskName = names.pop();
      rec = function() {
        if (names.length === 0) {
          return scope(taskName);
        } else {
          return namespace(names.shift(), rec);
        }
      };
      return rec();
    };

    $.mem = function(fn) {
      return function() {
        var args, _base, _base1, _name;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (_base = ((_base1 = arguments.callee)['memo'] || (_base1['memo'] = {})))[_name = [].concat(args)] || (_base[_name] = fn.apply(this, args));
      };
    };

    $.pathSearch = function(bin, dirs) {
      var d, _i, _len;
      if (dirs == null) {
        dirs = process.env.PATH.split(':');
      }
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        d = dirs[_i];
        if (fs.existsSync(path.join(d, bin))) {
          return path.join(d, bin);
        }
      }
    };

    $._ = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return path.join.apply(path, [process.cwd()].concat(args));
    };

    $.E = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return path.join.apply(path, [__dirname, '../etc'].concat(args));
    };

    $.pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf-8'));

    $.main = function() {
      return require('./tintan/main')(Tintan);
    };

    $.tasks = function(tintan) {
      return require('./tintan/tasks')(tintan);
    };

    $.home = $.mem(function() {
      var d, dirs, _i, _len;
      dirs = [process.env.TI_HOME, '/Library/Application Support/Titanium', path.join(process.env.HOME, 'Library/Application Support/Titanium'), path.join(process.env.HOME, '.titanium')];
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        d = dirs[_i];
        if (fs.existsSync(d)) {
          return d;
        }
      }
    });

    $.os = {
      'linux': 'linux',
      'darwin': 'osx',
      'win32': 'win'
    }[require('os').platform()];

    $.ios_version = $.mem(function() {
      var iphone_dir, ver;
      iphone_dir = path.join(process.env.HOME, 'Library', 'Application Support', 'iPhone Simulator');
      if (fs.existsSync(iphone_dir)) {
        ver = process.env.IOS_VERSION || Tintan.config().get('ios_version');
        if (ver && fs.existsSync(path.join(iphone_dir, ver))) {
          return ver;
        } else {
          return fs.readdirSync(iphone_dir).sort().slice(-1)[0];
        }
      }
    });

    $.android_version = $.mem(function() {
      var android_dir, d, ver;
      android_dir = path.join(this.android_home(), 'platforms');
      if (fs.existsSync(android_dir)) {
        ver = process.env.ANDROID_VERSION || Tintan.config().get('android_version');
        if (ver && fs.existsSync(path.join(android_dir, 'android-' + (ver - 1)))) {
          return ver;
        } else {
          return ((function() {
            var _i, _len, _ref, _results;
            _ref = fs.readdirSync(android_dir);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              d = _ref[_i];
              _results.push(d.split('-')[1]);
            }
            return _results;
          })()).sort(function(a, b) {
            return a - b;
          }).slice(-1)[0];
        }
      }
    });

    $.android_home = $.mem(function() {
      var brew_location, dir;
      dir = process.env.ANDROID_SDK || Tintan.config().get('android_sdk');
      if (dir && fs.existsSync(dir)) {
        return dir;
      } else {
        brew_location = {
          'osx': '/usr/local/Cellar/android-sdk',
          'linux': '/opt/android-sdk',
          'win': 'C:\\Program Files (x86)\\Android\\android-sdk'
        }[this.os];
        if (fs.existsSync(brew_location)) {
          return path.join(brew_location, fs.readdirSync(brew_location).sort().slice(-1)[0]);
        }
      }
    });

    $.platform = $.mem(function() {
      return process.env.TI_PLATFORM || Tintan.config().get('ti_platform' || {
        osx: 'iphone'
      }[this.os] || 'android');
    });

    $.sdk = $.mem(function() {
      var dir;
      dir = process.env.TI_SDK || Tintan.config().get('ti_sdk') || Tintan.appXML().sdk();
      if (dir && fs.existsSync(path.join(this.home(), 'mobilesdk', this.os, dir))) {
        return dir;
      } else {
        return fs.readdirSync(path.join(this.home(), 'mobilesdk', this.os)).sort().slice(-1)[0];
      }
    });

    $.py = $.mem(function() {
      var py, _i, _len, _ref;
      _ref = [process.env.PYTHON, process.env.TI_PYTHON, process.env.PYTHON_EXECUTABLE, Tintan.config().get('ti_python')];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        py = _ref[_i];
        if (fs.existsSync(py)) {
          return py;
        }
      }
      return this.pathSearch('python');
    });

    $.titan = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.tipy.apply(this, [['titanium.py'], args]);
    };

    $.fastdev = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.titan.apply($, ['fastdev'].concat(args || []));
    };

    $.tipy = function() {
      var args, ary, cb, k, opts, p, tf, tool, v, _i, _ref;
      ary = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      if (!(cb instanceof Function)) {
        if (args != null ? args.length : void 0) {
          args.push(cb);
        } else {
          args = cb;
        }
        cb = function() {};
      }
      tool = path.join.apply(path, [this.home(), 'mobilesdk', this.os, this.sdk()].concat(ary));
      opts = {};
      tf = (function() {
        var name;
        if ((function() {
          var _j, _len, _ref, _results;
          _ref = jake.program.taskNames;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            name = _ref[_j];
            _results.push(/testflight/.test(name));
          }
          return _results;
        })()) {
          return true;
        }
      })();
      if (Tintan.config().get('compile_js') === false) {
        opts.env = {
          'SKIP_JS_MINIFY': true
        };
        _ref = process.env;
        for (k in _ref) {
          v = _ref[k];
          opts.env[k] = v;
        }
      }
      p = spawn(this.py(), [tool].concat(args), opts);
      p.stdout.on('data', function(data) {
        return process.stdout.write(data);
      });
      p.stderr.on('data', function(data) {
        return process.stderr.write(data);
      });
      return p.on('exit', cb);
    };

    $.gitrepo = $.mem(function() {
      var gitconfig, k, remote, repo, _ref;
      gitconfig = ini.parse(fs.readFileSync($._('.git/config'), 'utf-8'));
      repo = (_ref = gitconfig['remote "origin"']) != null ? _ref.url : void 0;
      if (!repo) {
        remote = ((function() {
          var _results;
          _results = [];
          for (k in gitconfig) {
            if (/^remote/.test(k)) {
              _results.push(k);
            }
          }
          return _results;
        })()).sort()[0];
        if (remote) {
          repo = gitconfig[remote].url;
        }
      }
      return {
        type: 'git',
        url: repo
      } || {};
    });

    return $;

  }).call(this);

  Config = (function() {
    var DEFAULT_OPTIONS;

    function Config() {
      this.promptForAll = __bind(this.promptForAll, this);
      this.promptForNext = __bind(this.promptForNext, this);
    }

    DEFAULT_OPTIONS = {
      verbose: true,
      iced: false,
      compile_js: true,
      source_maps: true,
      debug: false,
      debug_address: '127.0.0.1',
      debug_port: 5858,
      android_avd: null,
      android_device: '',
      android_sdk: null,
      keystore: null,
      storepass: null,
      key_alias: null,
      ios_version: null,
      ti_home: null,
      ti_platform: null,
      ti_python: null,
      ti_sdk: null,
      sublime_project: null
    };

    Config.prototype.file = function() {
      return $._('tintan.config');
    };

    Config.prototype.load = function() {
      var k, v;
      if (!fs.existsSync(this.file())) {
        this.options = {};
      }
      if (this.options == null) {
        this.options = JSON.parse(fs.readFileSync(this.file(), 'utf-8'));
      }
      for (k in DEFAULT_OPTIONS) {
        v = DEFAULT_OPTIONS[k];
        if (!this.options.hasOwnProperty(k)) {
          this.options[k] = v;
        }
      }
      return this.save();
    };

    Config.prototype.save = function() {
      if (this.options) {
        return fs.writeFileSync(this.file(), JSON.stringify(this.options, void 0, 2), 'utf-8');
      } else {
        return console.log('Nothing to save.');
      }
    };

    Config.prototype.init = function() {
      var k, v;
      this.load();
      for (k in DEFAULT_OPTIONS) {
        v = DEFAULT_OPTIONS[k];
        if (!this.options.hasOwnProperty(k)) {
          this.options[k] = v;
        }
      }
      return this.save();
    };

    Config.prototype.display = function() {
      var k, v, _ref, _results;
      this.load();
      _ref = this.options;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (this.options.hasOwnProperty(k)) {
          _results.push(console.log(k + ': ' + ('' + v).yellow));
        }
      }
      return _results;
    };

    Config.prototype.set = function(opts) {
      var k, v, _results;
      if (opts == null) {
        opts = {};
      }
      this.load();
      _results = [];
      for (k in opts) {
        v = opts[k];
        if (this.options.hasOwnProperty(k)) {
          if (v === 'default') {
            v = DEFAULT_OPTIONS[k];
          }
          this.options[k] = v;
          console.log('' + k + ' set to '.green + v);
          _results.push(this.save());
        } else {
          _results.push(console.log('Unknown option: '.red + k));
        }
      }
      return _results;
    };

    Config.prototype.get = function(option) {
      var result;
      this.load();
      result = null;
      if (this.options.hasOwnProperty(option)) {
        if (this.options[option] === 'true') {
          result = true;
        } else if (this.options[option] === 'false') {
          result = false;
        } else {
          result = this.options[option];
        }
      }
      return result;
    };

    Config.prototype.envOrGet = function(option) {
      var o;
      o = jake.program.envVars[option];
      return o != null ? o : o = this.get(option);
    };

    Config.prototype.promptForNext = function(i) {
      var key, value,
        _this = this;
      if (i < 0) {
        return;
      }
      key = this.config_opts[i]['k'];
      value = this.config_opts[i]['v'];
      process.stdout.write(key + ':' + value + ', new value: ');
      process.stdin.resume();
      process.stdin.on('data', function(text) {
        var ans, lowerText;
        process.stdin.removeAllListeners('data');
        text = text.replace(/(\r\n|\n|\r)/gm, "");
        ans = text;
        if (typeof _this.options[key] === 'boolean') {
          lowerText = '' + text.toLowerCase();
          switch (lowerText) {
            case 't':
            case 'true':
            case 'tru':
            case 'tr':
              ans = true;
              break;
            case 'f':
            case 'false':
            case 'fal':
            case 'fa':
            case 'fals':
              ans = false;
              break;
          }
        }
        process.stdin.pause();
        if (ans === '') {
          return _this.promptForNext(--i);
        } else {
          _this.options[key] = ans;
          _this.save();
          return _this.promptForNext(--i);
        }
      });
      return this;
    };

    Config.prototype.promptForAll = function() {
      var i, k, v, _ref;
      this.load();
      this.config_opts = [];
      process.stdin.setEncoding('utf8');
      i = 0;
      _ref = this.options;
      for (k in _ref) {
        v = _ref[k];
        if (!(this.options.hasOwnProperty(k))) {
          continue;
        }
        this.config_opts.push({
          k: k,
          v: v
        });
        i++;
      }
      return this.promptForNext(i - 1);
    };

    return Config;

  })();

  AppXML = (function() {
    AppXML.prototype.file = function() {
      return $._('tiapp.xml');
    };

    AppXML.prototype.exist = function() {
      return fs.existsSync(this.file());
    };

    function AppXML() {
      if (!this.exist()) {
        throw ("Missing Titanium file " + (this.file())).red;
      }
      this.doc = libxml.parseXmlString(fs.readFileSync(this.file(), 'utf-8'));
    }

    AppXML.prototype.plugin = function() {
      return this.doc.get("./plugins/plugin[contains(text(),'tintan')]");
    };

    AppXML.prototype.id = function() {
      return this.doc.get('./id').text();
    };

    AppXML.prototype.guid = function() {
      return this.doc.get('./guid').text();
    };

    AppXML.prototype.name = function() {
      return this.doc.get('./name').text();
    };

    AppXML.prototype.sdk = function() {
      return this.doc.get('./sdk-version').text();
    };

    AppXML.prototype.version = function() {
      var i, v;
      v = this.doc.get('./version').text().split('.');
      if (v.length < 3) {
        v = v.concat((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = 2 - v.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push('0');
          }
          return _results;
        })());
      }
      return v.join('.');
    };

    AppXML.prototype.targets = function() {
      var device, devices, enabled;
      devices = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (devices.length > 0) {
        enabled = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = devices.length; _i < _len; _i++) {
            device = devices[_i];
            if (!!this.doc.get('./deployment-targets/target[@device="' + device + '" and contains(text(), "true")]')) {
              _results.push(device);
            }
          }
          return _results;
        }).call(this);
        return enabled.length === devices.length;
      } else {
        return this.doc.find('./deployment-targets/target[contains(text(), "true")]/@device').map(function(i) {
          return i.text();
        });
      }
    };

    return AppXML;

  })();

  Tintan = (function() {
    function Tintan() {}

    Tintan.$ = $;

    Tintan.version = $.pkg.version;

    Tintan.appXML = $.mem(function() {
      return new AppXML;
    });

    Tintan.config = function() {
      return new Config;
    };

    return Tintan;

  })();

  module.exports = Tintan;

}).call(this);

/*
//@ sourceMappingURL=tintan.map
*/
